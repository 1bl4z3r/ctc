/* Material-inspired minimal theme */
:root {
  --primary: #0741ad;
  --on-primary: #fff;
  --bg: #121212;
  --surface: #1e1e1e;
  --on-surface: #e0e0e0;
  --error: #b00020;
  --spacing: 1rem;
  --radius: 0.5rem;
}

/* Light theme overrides */
@media (prefers-color-scheme: light) {
  :root {
    --bg: #fafafa;
    --surface: #fff;
    --on-surface: #202020;
  }
}

* { box-sizing: border-box; margin: 0; padding: 0; }
/* Existing body styles */
body {
  font-family: Roboto, sans-serif;
  background: var(--bg);
  color: var(--on-surface);
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  /* Remove overflow-y: scroll if you added it, or ensure it's not here for now */
  /* overflow-y: auto; or remove entirely if not needed */
}

/* Spinner styles */
.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3); /* Light grey border */
  border-top: 4px solid var(--on-primary); /* Primary color for the top border */
  border-radius: 50%; /* Make it a circle */
  width: 40px; /* Size of the spinner */
  height: 40px; /* Size of the spinner */
  animation: spin 1s linear infinite; /* Apply the spin animation */
  margin-bottom: 10px; /* Space between spinner and 'Loading...' text */
}

/* Keyframe animation for spinning */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Adjust loader to arrange spinner and text */
#loader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--bg);
  color: var(--on-surface);
  display: flex;
  flex-direction: column; /* Change to column to stack spinner and text */
  justify-content: center;
  align-items: center;
  z-index: 9999;
  transition: opacity 0.5s ease-out;
}

#loader.hidden {
  opacity: 0;
  pointer-events: none;
}

/* New wrapper for consistent centering */
.content-wrapper {
  flex: 1; /* Allow it to grow in the flex column */
  max-width: 600px; /* Set the maximum width here */
  margin: auto; /* Center it */
  padding: var(--spacing); /* Apply padding here to avoid inner shifts */
  width: 100%; /* Ensure it takes full available width up to max-width */
}

/* Adjust .container */
.container {
  /* Remove flex: 1, max-width, and margin: auto from here */
  /* They are now handled by .content-wrapper */
  padding: 0; /* Remove padding here as it's on the wrapper */
  width: 100%; /* Ensure it fills the wrapper */
}
.topbar {
  background: var(--primary);
  color: var(--on-primary);
  text-align: center;
  padding: var(--spacing);
}
.drop-text {
  display: grid;
  gap: var(--spacing);
  margin: var(--spacing) 0;
}
.drop-text .input-with-btn {
  display: flex;
  width: 100%;
}
.input-with-btn input {
  flex: 1;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.input-with-btn button {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  padding: 0 1rem;
  margin: 0;
}
select, input {
  width: 100%; padding: 0.75rem;
  border: 1px solid var(--surface);
  background: var(--surface);
  color: var(--on-surface);
}
button, .btn {
  cursor: pointer;
  border: none;
  padding: 0.75rem var(--spacing);
  background: var(--primary);
  color: var(--on-primary);
  border-radius: var(--radius);
  transition: opacity 0.2s;
}
button:hover {
  opacity: 0.8;
}
.service-buttons {
  display: flex;
  gap: var(--spacing);
  justify-content: center;
  margin: var(--spacing) 0;
}
.service-btn {
  flex: 1;
  text-transform: uppercase;
  font-weight: bold;
}

.faq details {
  background: var(--surface);
  border-radius: var(--radius);
  margin-bottom: var(--spacing);
}

.faq summary {
  list-style: none;       /* remove default marker */
  cursor: pointer;
  padding: var(--spacing);
  position: relative;
}

.faq summary::after {
  content: "▾";           /* down‑arrow */
  position: absolute;
  right: var(--spacing);
  transition: transform 0.2s;
}

.faq details[open] summary::after {
  transform: rotate(180deg);
}

.faq details p {
  padding: 0 var(--spacing) var(--spacing);
  color: var(--on-surface);
}

.error { color: var(--error); }
.footer {
  text-align: center; padding: var(--spacing);
  background: var(--surface);
  color: var(--on-surface);
}